name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - v[0-9]+.*
jobs:
  release:
    name: ${{ matrix.target }}
    strategy:
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
            upx_args: --best --lzma
            upx_strip: false
          - target: aarch64-unknown-linux-musl
            upx_args: --best --lzma
            upx_strip: false
          - target: x86_64-unknown-linux-gnu
            upx_args: --best --lzma
            upx_strip: true
          - target: x86_64-unknown-linux-musl
            upx_args: --best --lzma
            upx_strip: true
          - target: aarch64-apple-darwin
            os: macos-latest
            upx_args: --best
            upx_strip: false
          - target: x86_64-apple-darwin
            os: macos-latest
            upx_args: --best
            upx_strip: true
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            upx_args: -9
            upx_strip: false
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3.0.2
      - name: Get binary name
        uses: dangdennis/toml-action@v1.3.0
        id: read_cargo_toml
        with:
          file: "Cargo.toml"
          field: "package.name"
      - uses: dtolnay/rust-toolchain@stable
      - name: Setup rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v1
        with:
          cache-on-failure: true
      - run: echo "RUSTFLAGS=${RUSTFLAGS} -C target-feature=+crt-static" >> "${GITHUB_ENV}"
        if: endsWith(matrix.target, 'windows-msvc')
      - name: Build target
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target ${{ matrix.target }} --locked
      - name: Compress binaries
        if: endsWith(matrix.target, 'windows-msvc') == false
        uses: svenstaro/upx-action@v2
        with:
          file: target/${{ matrix.target }}/release/${{ steps.read_cargo_toml.outputs.value }}
          args: ${{ matrix.upx_args }}
          strip: ${{ matrix.upx_strip }}
      # we use these artifact later in the docker build to prevent having to rebuild
      - uses: actions/upload-artifact@v3
        if: ${{ matrix.target == 'aarch64-unknown-linux-musl' }}
        with:
          name: energy_bridge-arm64
          path: target/${{ matrix.target }}/release/${{ steps.read_cargo_toml.outputs.value }}
      - uses: actions/upload-artifact@v3
        if: ${{ matrix.target == 'x86_64-unknown-linux-musl' }}
        with:
          name: energy_bridge-amd64
          path: target/${{ matrix.target }}/release/${{ steps.read_cargo_toml.outputs.value }}
      - uses: actions/upload-artifact@v3
        if: ${{ matrix.target == 'x86_64-apple-darwin' }}
        with:
          name: energy_bridge-mac-x86_64
          path: target/${{ matrix.target }}/release/${{ steps.read_cargo_toml.outputs.value }}
      - uses: actions/upload-artifact@v3
        if: ${{ matrix.target == 'aarch64-apple-darwin' }}
        with:
          name: energy_bridge-mac-arm64
          path: target/${{ matrix.target }}/release/${{ steps.read_cargo_toml.outputs.value }}
      - uses: taiki-e/upload-rust-binary-action@v1
        if: ${{ github.event_name == 'release' }}
        with:
          bin: ${{ steps.read_cargo_toml.outputs.value }}
          target: ${{ matrix.target }}
          tar: all
          zip: windows
          include: README.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
